[{"C:\\Users\\Hassan\\Documents\\Projects\\quizzial\\src\\index.js":"1","C:\\Users\\Hassan\\Documents\\Projects\\quizzial\\src\\App.js":"2","C:\\Users\\Hassan\\Documents\\Projects\\quizzial\\src\\Question.js":"3"},{"size":184,"mtime":1662765361669,"results":"4","hashOfConfig":"5"},{"size":3250,"mtime":1663017974946,"results":"6","hashOfConfig":"5"},{"size":2542,"mtime":1662765361718,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1892h5r",{"filePath":"11","messages":"12","suppressedMessages":"13","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Hassan\\Documents\\Projects\\quizzial\\src\\index.js",[],[],"C:\\Users\\Hassan\\Documents\\Projects\\quizzial\\src\\App.js",["18","19","20"],[],"import React from \"react\";\nimport Question from \"./Question\";\nimport { nanoid } from \"nanoid\";\n\nexport default function App() {\n  const [quizStarted, setQuizStarted] = React.useState(false);\n  const [quizData, setQuizData] = React.useState([]);\n  const [questionSubmitted, setQuestionSubmitted] = React.useState(false);\n  const [correctAnswersCount, setCorrectAnswersCount] = React.useState(0);\n\n  const quizQuestions = quizData.map((data) => {\n    return (\n      <Question\n        key={data.id}\n        id={data.id}\n        question={data.question}\n        incorrectAnswers={data.incorrect_answers}\n        correctAnswer={data.correct_answer}\n        selectedAnswer={data.selected_answer}\n        updateSelectedAnswer={updateSelectedAnswer}\n        questionSubmitted={questionSubmitted}\n      />\n    );\n  });\n\n  const topImageStyles = {\n    position: \"absolute\",\n    right: !quizStarted ? \"0px\" : \"-20px\",\n    top: !quizStarted ? \"0px\" : \"-50px\",\n  };\n\n  const bottomImageStyles = {\n    position: \"absolute\",\n    left: !quizStarted ? \"0px\" : \"-50px\",\n    bottom: !quizStarted ? \"0px\" : \"-50px\",\n  };\n\n  function updateSelectedAnswer(id, answer) {\n    setQuizData((prevQuizData) => {\n      return prevQuizData.map((data) => {\n        return data.id === id ? { ...data, selected_answer: answer } : data;\n      });\n    });\n  }\n\n  function startQuiz() {\n    setQuizStarted(true);\n    setQuestionSubmitted(false);\n    setCorrectAnswersCount(0);\n    fetch(\n      \"https://opentdb.com/api.php?amount=5&category=21&difficulty=medium&type=multiple\"\n    )\n      .then((res) => res.json())\n      .then((data) => {\n        const questionsData = data.results.map((question) => {\n          question[\"selected_answer\"] = \"\";\n          question[\"id\"] = nanoid();\n          return question;\n        });\n        setQuizData(questionsData);\n      });\n  }\n\n  function checkAnswers() {\n    setQuestionSubmitted(true);\n    quizData.map((data) => {\n      data.correct_answer === data.selected_answer &&\n        setCorrectAnswersCount((prevCount) => prevCount + 1);\n    });\n  }\n\n  return (\n    <main>\n      <img style={topImageStyles} src=\"../images/blob5.png\" />\n      {!quizStarted ? (\n        <div className=\"start-page\">\n          <h1 className=\"main-header\">Quizzical</h1>\n          <p className=\"main-desc\">Some description if needed</p>\n          <button className=\"start-button\" onClick={startQuiz}>\n            Start quiz\n          </button>\n        </div>\n      ) : (\n        <div className=\"quiz-content\">\n          {quizQuestions}\n          {questionSubmitted ? (\n            <div className=\"form-submit\">\n              <div>\n                {`You scored ${correctAnswersCount}/${quizData.length} correct answers`}\n              </div>\n              <button className=\"button-check-answers\" onClick={startQuiz}>\n                Play Again\n              </button>\n            </div>\n          ) : (\n            <div className=\"form-submit\">\n              <div>\n                <button className=\"button-check-answers\" onClick={checkAnswers}>\n                  Check Answers\n                </button>\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n      <img style={bottomImageStyles} src=\"../images/blob6.png\" />\n    </main>\n  );\n}\n","C:\\Users\\Hassan\\Documents\\Projects\\quizzial\\src\\Question.js",["21"],[],{"ruleId":"22","severity":1,"message":"23","line":66,"column":25,"nodeType":"24","messageId":"25","endLine":66,"endColumn":27},{"ruleId":"26","severity":1,"message":"27","line":74,"column":7,"nodeType":"28","endLine":74,"endColumn":63},{"ruleId":"26","severity":1,"message":"27","line":106,"column":7,"nodeType":"28","endLine":106,"endColumn":66},{"ruleId":"29","severity":1,"message":"30","line":15,"column":8,"nodeType":"31","endLine":15,"endColumn":10,"suggestions":"32"},"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'props.correctAnswer' and 'props.incorrectAnswers'. Either include them or remove the dependency array. If 'setAllAnswers' needs the current value of 'props.incorrectAnswers', you can also switch to useReducer instead of useState and read 'props.incorrectAnswers' in the reducer.","ArrayExpression",["33"],{"desc":"34","fix":"35"},"Update the dependencies array to be: [props.correctAnswer, props.incorrectAnswers]",{"range":"36","text":"37"},[502,504],"[props.correctAnswer, props.incorrectAnswers]"]