{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hassan\\\\Documents\\\\Projects\\\\quizzial\\\\src\\\\Question.js\",\n    _s = $RefreshSig$();\n\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Question(props) {\n  _s();\n\n  const [allAnswers, setAllAnswers] = React.useState([]);\n  React.useEffect(() => {\n    setAllAnswers(() => {\n      const CorrectAndIncorrectAnswers = props.incorrectAnswers;\n      const index = Math.floor(Math.random() * CorrectAndIncorrectAnswers.length);\n      CorrectAndIncorrectAnswers.splice(index, 0, props.correctAnswer);\n      return CorrectAndIncorrectAnswers;\n    });\n  }, []);\n\n  function handleClick(answer) {\n    if (props.selectedAnswer === \"\") {\n      props.updateSelectedAnswer(props.id, answer);\n    } else if (props.selectedAnswer === answer) {\n      props.updateSelectedAnswer(props.id, \"\");\n    }\n  }\n\n  function getStyle(answer) {\n    if (props.questionSubmitted) {\n      if (answer === props.selectedAnswer) {\n        if (answer === props.correctAnswer) {\n          return {\n            backgroundColor: \"#94D7A2\",\n            color: \"#293264\"\n          };\n        } else {\n          return {\n            backgroundColor: \"#F8BCBC\",\n            color: \"#293264\"\n          };\n        }\n      } else {\n        if (answer === props.correctAnswer) {\n          return {\n            backgroundColor: \"#94D7A2\",\n            color: \"#293264\"\n          };\n        } else {\n          return {\n            color: \"#293264\",\n            opacity: \"0.5\",\n            border: \"0.794239px solid #4D5B9E\"\n          };\n        }\n      }\n    } else {\n      if (answer === props.selectedAnswer) {\n        return {\n          backgroundColor: \"#94D7A2\",\n          color: \"#293264\"\n        };\n      } else {\n        return {};\n      }\n    }\n  }\n\n  const answers = allAnswers.map(answer => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      value: answer,\n      className: \"answer\",\n      onClick: () => handleClick(answer),\n      style: getStyle(answer),\n      children: answer\n    }, answer, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 17\n    }, this);\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: props.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers\",\n      children: answers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Question, \"tOo09c+c8RNfh2nFCwiITKxVQYU=\");\n\n_c = Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"names":["React","Question","props","allAnswers","setAllAnswers","useState","useEffect","CorrectAndIncorrectAnswers","incorrectAnswers","index","Math","floor","random","length","splice","correctAnswer","handleClick","answer","selectedAnswer","updateSelectedAnswer","id","getStyle","questionSubmitted","backgroundColor","color","opacity","border","answers","map","question"],"sources":["C:/Users/Hassan/Documents/Projects/quizzial/src/Question.js"],"sourcesContent":["import React from \"react\"\n\nexport default function Question(props){\n    \n    const [allAnswers, setAllAnswers] = React.useState([])\n    \n    React.useEffect(() => {\n        setAllAnswers(() => {\n            const CorrectAndIncorrectAnswers = props.incorrectAnswers\n            const index = Math.floor(Math.random() * CorrectAndIncorrectAnswers.length)\n            CorrectAndIncorrectAnswers.splice(index, 0,props.correctAnswer)\n            return CorrectAndIncorrectAnswers\n        })\n        \n    }, [])\n    \n    function handleClick(answer){\n        if(props.selectedAnswer === \"\"){\n            props.updateSelectedAnswer(props.id,answer)\n        } else if (props.selectedAnswer === answer){\n            props.updateSelectedAnswer(props.id,\"\")\n        }\n    }\n    \n    function getStyle(answer) {\n        if(props.questionSubmitted){\n            if(answer === props.selectedAnswer){\n                if(answer === props.correctAnswer){\n                    return {\n                        backgroundColor: \"#94D7A2\",\n                        color: \"#293264\"\n                    }\n                } else {\n                    return {\n                        backgroundColor: \"#F8BCBC\",\n                        color: \"#293264\"\n                    }\n                }\n            }else{\n                if(answer === props.correctAnswer){\n                    return {\n                        backgroundColor: \"#94D7A2\",\n                        color: \"#293264\"\n                    }\n                }else{\n                    return {\n                        color: \"#293264\",\n                        opacity: \"0.5\",\n                        border: \"0.794239px solid #4D5B9E\"\n                    }\n                }\n            }\n        }else{\n            if(answer === props.selectedAnswer){\n                return {\n                    backgroundColor: \"#94D7A2\",\n                    color: \"#293264\"\n                }\n            } else {\n                    return {}\n            }\n        }\n    }\n    \n    const answers = allAnswers.map( answer => {\n        return (<div \n                    key={answer}\n                    value={answer}\n                    className=\"answer\"\n                    onClick={() => handleClick(answer)}\n                    style={getStyle(answer)}\n                >\n                {answer}\n                </div>)\n        })\n    \n    return(\n        <div className=\"question-content\">\n            <div>{props.question}</div>\n            <div className=\"answers\">{answers}</div>\n        </div>\n    )\n}\n\n"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;EAAA;;EAEnC,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BJ,KAAK,CAACK,QAAN,CAAe,EAAf,CAApC;EAEAL,KAAK,CAACM,SAAN,CAAgB,MAAM;IAClBF,aAAa,CAAC,MAAM;MAChB,MAAMG,0BAA0B,GAAGL,KAAK,CAACM,gBAAzC;MACA,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBL,0BAA0B,CAACM,MAAtD,CAAd;MACAN,0BAA0B,CAACO,MAA3B,CAAkCL,KAAlC,EAAyC,CAAzC,EAA2CP,KAAK,CAACa,aAAjD;MACA,OAAOR,0BAAP;IACH,CALY,CAAb;EAOH,CARD,EAQG,EARH;;EAUA,SAASS,WAAT,CAAqBC,MAArB,EAA4B;IACxB,IAAGf,KAAK,CAACgB,cAAN,KAAyB,EAA5B,EAA+B;MAC3BhB,KAAK,CAACiB,oBAAN,CAA2BjB,KAAK,CAACkB,EAAjC,EAAoCH,MAApC;IACH,CAFD,MAEO,IAAIf,KAAK,CAACgB,cAAN,KAAyBD,MAA7B,EAAoC;MACvCf,KAAK,CAACiB,oBAAN,CAA2BjB,KAAK,CAACkB,EAAjC,EAAoC,EAApC;IACH;EACJ;;EAED,SAASC,QAAT,CAAkBJ,MAAlB,EAA0B;IACtB,IAAGf,KAAK,CAACoB,iBAAT,EAA2B;MACvB,IAAGL,MAAM,KAAKf,KAAK,CAACgB,cAApB,EAAmC;QAC/B,IAAGD,MAAM,KAAKf,KAAK,CAACa,aAApB,EAAkC;UAC9B,OAAO;YACHQ,eAAe,EAAE,SADd;YAEHC,KAAK,EAAE;UAFJ,CAAP;QAIH,CALD,MAKO;UACH,OAAO;YACHD,eAAe,EAAE,SADd;YAEHC,KAAK,EAAE;UAFJ,CAAP;QAIH;MACJ,CAZD,MAYK;QACD,IAAGP,MAAM,KAAKf,KAAK,CAACa,aAApB,EAAkC;UAC9B,OAAO;YACHQ,eAAe,EAAE,SADd;YAEHC,KAAK,EAAE;UAFJ,CAAP;QAIH,CALD,MAKK;UACD,OAAO;YACHA,KAAK,EAAE,SADJ;YAEHC,OAAO,EAAE,KAFN;YAGHC,MAAM,EAAE;UAHL,CAAP;QAKH;MACJ;IACJ,CA3BD,MA2BK;MACD,IAAGT,MAAM,KAAKf,KAAK,CAACgB,cAApB,EAAmC;QAC/B,OAAO;UACHK,eAAe,EAAE,SADd;UAEHC,KAAK,EAAE;QAFJ,CAAP;MAIH,CALD,MAKO;QACC,OAAO,EAAP;MACP;IACJ;EACJ;;EAED,MAAMG,OAAO,GAAGxB,UAAU,CAACyB,GAAX,CAAgBX,MAAM,IAAI;IACtC,oBAAQ;MAEI,KAAK,EAAEA,MAFX;MAGI,SAAS,EAAC,QAHd;MAII,OAAO,EAAE,MAAMD,WAAW,CAACC,MAAD,CAJ9B;MAKI,KAAK,EAAEI,QAAQ,CAACJ,MAAD,CALnB;MAAA,UAOCA;IAPD,GACSA,MADT;MAAA;MAAA;MAAA;IAAA,QAAR;EASC,CAVW,CAAhB;EAYA,oBACI;IAAK,SAAS,EAAC,kBAAf;IAAA,wBACI;MAAA,UAAMf,KAAK,CAAC2B;IAAZ;MAAA;MAAA;MAAA;IAAA,QADJ,eAEI;MAAK,SAAS,EAAC,SAAf;MAAA,UAA0BF;IAA1B;MAAA;MAAA;MAAA;IAAA,QAFJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADJ;AAMH;;GAhFuB1B,Q;;KAAAA,Q"},"metadata":{},"sourceType":"module"}